##########################################################################
# $Id: munin-node,v 1.0 2008/02/02 11:25:00 stefan Exp $
##########################################################################

##########################################################################
# This was written and is maintained by:
#    Gunnar Wrobel <p@rdus.de>
#
# Please send all comments, suggestions, bug reports,
#    etc, to p@rdus.de.
##########################################################################

#use warnings;
use strict;

my $Detail 	= $ENV{'LOGWATCH_DETAIL_LEVEL'} || 0;
my $Version	= "1.0-20080509";

# initialize logwatch variables 
my $ThisLine	= "";
my %OtherList 	= ();

# initialize variables which save the stats
my %Connections = ();
my $ConnCount = 0;

### Parse the lines ###


while (defined($ThisLine = <STDIN>)) {
   chomp($ThisLine);

   #2008/05/09-12:45:00 CONNECT TCP Peer: "127.0.0.1:60631" Local: "127.0.0.1:4949"
   if ($ThisLine =~ /^[0-9]{4}\/[0-9]{2}\/[0-9]{2}-[0-9]{2}:[0-9]{2}:[0-9]{2} CONNECT TCP Peer: \"([0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}):[0-9]{1,6}\" Local: \"[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}:[0-9]{1,6}\"$/) {
      %Connections = (%Connections, $1 => $Connections{$1}+1);
      $ConnCount++;
   }
  
   else {
      # Report any unmatched entries...
      chomp($ThisLine);
      $OtherList{$ThisLine}++;
   }
}

### generate the output ###

if ($ConnCount) {
    if ($Detail >= 5) {
        print "\nMunin-Node got contacted by these host(s):";
        foreach my $host (keys %Connections) {
 	    printf "\n\t$host\t\t%5i Time(s)", $Connections{$host};
	}
	print "\n";
    } else {
	print "\nMunin-Node got contacted $ConnCount time(s)\n";
    }
}

if (keys %OtherList) {
   print "\n**** Unmatched entries ****\n";
   foreach my $Error (keys %OtherList) {
      print "    $Error : $OtherList{$Error} Times\n";
   }
}

### return without a failure ###
exit(0);

