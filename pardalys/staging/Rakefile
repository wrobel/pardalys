# Copyright 2008 Tim Dysinger
# Copyright 2008 Gunnar Wrobel
# http://www.opensource.org/licenses/mit-license.php

%w(rubygems open-uri ostruct delegate
   hpricot erb aws/s3 AWS AWS/EC2 facter yaml pp).each do |l|
  require(l)
end

######################################################################
# Monkey Patches
######################################################################

class OpenStruct
  class << self ; public(:binding) end
  def binding ; super end
  def merge(other) ; OpenStruct.new(@table.merge(other.to_hash)) end
  def merge!(other) ; @table.merge!(other.to_hash) ; self end
  def to_hash ; @table.dup end
  def to_yaml ; YAML.dump(@table) end
end
@env = OpenStruct.new

######################################################################
# Image
######################################################################

desc('build an image')
task(:image => :upload)

def chroot(chroot_dir, *a)
  script = ['env-update', '. /etc/profile', a].flatten.join(" && \n")
  File.open("#{chroot_dir}/tmp/rake.sh", 'w')  { |f| f.write script }
  sh("chroot #{chroot_dir} /bin/bash /tmp/rake.sh")
ensure
  if File.exists?("#{chroot_dir}/tmp/rake.sh")
    rm("#{chroot_dir}/tmp/rake.sh")
  end
end

task(:env) do
  @env.merge!(YAML.load(IO.read("env.yml")))
  @ec2 = AWS::EC2::Base.new(@env.to_hash)
  @env.merge!(YAML.load(IO.read("defaults.yml")))
  if File.exists?('config.yml')
    @env.merge!(YAML.load(IO.read("config.yml")))
  end
end

task(:facts => :env) do
  if not @env.target
    Facter.search('../modules/tool_ec2_tools/plugins/facter')
    Facter.loadfacts
    Facter.collection.each { |k, v| @env.send("#{k}=", v) }
  else 
    @env.send('processorcount=', @env.target.processorcount)
    @env.send('hardwaremodel=', @env.target.hardwaremodel)
    @env.send('architecture=', @env.target.architecture)
    @env.send('ec2_instance_cpu=', @env.target.ec2_instance_cpu)
  end
end

task(:cleanup => :facts) do
  sh("rm -rf /etc/config-archive/* /var/backup/*.tar.gz /var/backup/log/* " <<
     "/var/lib/flexbackup/* /var/lib/puppet/clientbucket/* /var/lib/slocate/* " <<
     "/var/log/emerge* /var/log/syslog.d/* /var/log/flexbackup/* /var/log/portage/elog/* /var/backups/* " <<
     "/home/ubuntu/.backups /home/ubuntu/.bash_history /home/ubuntu/.osc* /etc/rc*.d/S99kolab" <<
     "/var/cache/apt/archives/*.deb /home/ubuntu/environment/tools/pardalys/pardalys/staging/config.yml~" <<
     "/var/www/pear/cache/* /var/www/pear/download/*")
end

file_create('.download_dir' => :facts) do
  unless File.exists?("#{@env.download_dir}")
    mkdir_p("#{@env.download_dir}")
  end
  touch('.download_dir')
end

file_create('.stage_file' => '.download_dir') do
  sh("wget -q -O #{@env.download_dir}/#{@env.stage_prefix}-#{@env.stage_suffix} " <<
     "#{@env.download_url}/" <<
     "#{@env.architecture =~ /i386/ ? 'x86' : 'amd64'}/current/stages/" <<
     "#{@env.stage_prefix}-#{@env.architecture =~ /i386/ ? 'i686' : 'amd64'}-#{@env.stage_suffix}")
  touch('.stage_file')
end

file_create('.mnt_dir' => '.stage_file') do
  mkdir_p("#{@env.mnt_dir}/etc")
  sh("tar -xjf #{@env.download_dir}/#{@env.stage_prefix}-#{@env.stage_suffix} " <<
     "-C #{@env.mnt_dir}")
  cp('/etc/mtab', "#{@env.mnt_dir}/etc")
  cp('/etc/resolv.conf', "#{@env.mnt_dir}/etc")
  mkdir("#{@env.mnt_dir}/etc/portage")
  mkdir("#{@env.mnt_dir}/etc/pardalys")
  File.open("#{@env.mnt_dir}/etc/pardalys/site.pp", 'w') do |f|
    f.write(ERB.new(IO.read('bootstrap/site.pp.erb')).
            result(@env.binding))
  end
  File.open("#{@env.mnt_dir}/etc/make.conf", 'w') do |f|
    f.write(ERB.new(IO.read('bootstrap/make.conf.erb')).
            result(@env.binding))
  end
  mkdir("#{@env.mnt_dir}/usr/portage")
  mkdir("#{@env.mnt_dir}/usr/local/portage")
  arch = @env.architecture =~ /i386/ ? 'x86' : 'amd64'
  File.open("#{@env.mnt_dir}/etc/portage/package.keywords", 'w') do |f|
    f.write("=net-nds/openldap-2.4.7 ~#{arch}\n")
    f.write("app-admin/pardalys ~#{arch}\n")
    f.write("=app-admin/puppet-0.24.5-r2 ~#{arch}\n")
  end
  File.open("#{@env.mnt_dir}/etc/portage/package.unmask", 'w') do |f|
    f.write("app-admin/pardalys\n")
  end
  File.open("#{@env.mnt_dir}/etc/portage/package.use", 'w') do |f|
    f.write("app-admin/puppet ldap emacs\n")
  end
  touch('.mnt_dir')
end

file_create('.mnt' => '.mnt_dir') do
  sh("mount -t proc none #{@env.mnt_dir}/proc")
  sh("mount -o bind /dev #{@env.mnt_dir}/dev")
  if File.exists?('/etc/gentoo-release')
    sh("mount -o bind /usr/portage #{@env.mnt_dir}/usr/portage")
  end
  touch('.mnt')
end

task(:clean => :facts) do
  if File.exists?("#{@env.mnt_dir}/proc/cpuinfo")
    sh("umount #{@env.mnt_dir}/proc || echo '/proc not mounted'")
  end
  if File.exists?("#{@env.mnt_dir}/dev/random")
    sh("umount #{@env.mnt_dir}/dev || echo '/dev not mounted'")
  end
  if File.exists?("#{@env.mnt_dir}/usr/portage/www-apps")
    sh("umount #{@env.mnt_dir}/usr/portage || echo '/usr/portage not mounted'")
  end
  if File.exists?('.mnt')
    rm('.mnt')
  end
  if File.exists?("#{@env.mnt_dir}")
    sh("rm -rf #{@env.mnt_dir}")
  end
  if File.exists?('.mnt_dir')
    rm('.mnt_dir')
  end
  if File.exists?('site.pp.new')
    rm('site.pp.new')
  end
  if File.exists?('site.pp.diff')
    rm('site.pp.diff')
  end
end

task(:clean_all => :clean) do
  if File.exists?('.download_dir')
    sh("rm -rf #{@env.download_dir}")
  end
  if File.exists?('.download_dir')
    rm('.download_dir')
  end
  if File.exists?('.stage_file')
    rm('.stage_file')
  end
end

task(:bootstrap => '.bootstrap')
file_create('.bootstrap' => '.mnt') do
  if not File.exists?('/etc/gentoo-release')
    chroot(@env.mnt_dir,
           'emerge --sync')
  end
  chroot(@env.mnt_dir,
         'groupmems -p -g users',
         "usermod -p `dd if=/dev/urandom count=50 2>/dev/null" <<
         " | md5sum | cut -d ' ' -f1-1` root",
         'emerge -Du layman subversion',
         'python-updater -i',
         'layman -a kolab',
         'echo source /usr/portage/local/layman/make.conf >> /etc/make.conf',
         'USE="develop" emerge rubygems pardalys',
         'update-eix',
         'dev-pardalys',
         'cp /usr/share/pardalys/dev-pardalys/pardalys/bin/pardalys /usr/sbin/pardalys',
         'pardalys')
  touch('.bootstrap')
end

task(:bundle => '.bundle')
file_create('.bundle' => '.bootstrap') do
  File.open("#{@env.mnt_dir}/tmp/key.pem", 'w') do |f|
    f.write(@env.key.strip)
  end
  File.open("#{@env.mnt_dir}/tmp/cert.pem", 'w') do |f|
    f.write(@env.cert.strip)
  end
  chroot(@env.mnt_dir,
         "ec2-bundle-vol -b -u #{@env.owner_id} " <<
         "-k /tmp/key.pem -c /tmp/cert.pem " <<
         "-a -e /root,/dev,/proc,/sys,/tmp,/mnt " <<
         "--no-inherit -r #{@env.architecture} " <<
         "--fstab /etc/fstab --kernel #{@env.ec2_kernel_id} -d /tmp")
  touch('.bundle')
end

task(:upload => '.upload')
file_create('.upload' => '.bundle') do
  bname = "#{@env.image_name}-#{@env.ec2_instance_type}-#{@env.ec2_instance_cpu}"<<
    "-#{Time.now.to_f}"
  AWS::S3::Base.establish_connection!(:access_key_id =>
                                      @env.access_key_id,
                                      :secret_access_key =>
                                      @env.secret_access_key)
  AWS::S3::Bucket.create(bname)
  chroot(@env.mnt_dir,
         "ec2-upload-bundle -b #{bname} -a #{@env.access_key_id} " <<
         "-s #{@env.secret_access_key} -m /tmp/image.manifest.xml ",
         "ec2-register -K /tmp/key.pem -C /tmp/cert.pem " <<
         "#{bname}/image.manifest.xml")
  touch('.upload')
end

task(:reinit => 'site.pp.diff')
file_create('site.pp.diff' => :facts) do
  if File.exists?('instance.yml')
    @env.merge!(YAML.load(IO.read("instance.yml")))
  end
  File.open("site.pp.new", 'w') do |f|
    f.write(ERB.new(IO.read('bootstrap/site.pp.erb')).
            result(@env.binding))
  end
  sh('diff -Nau /etc/pardalys/site.pp site.pp.new > site.pp.diff || echo Created suggested diff.')
end

task(:rebundle => '.rebundle')
file_create('.rebundle' => :cleanup) do
  File.open("/tmp/key.pem", 'w') do |f|
    f.write(@env.key.strip)
  end
  File.open("/tmp/cert.pem", 'w') do |f|
    f.write(@env.cert.strip)
  end
  sh(". /etc/profile && ec2-bundle-vol --batch -u #{@env.owner_id} " <<
     "-k /tmp/key.pem -c /tmp/cert.pem " <<
     "-a -e /root,/dev,/proc,/sys,/tmp,/mnt " <<
     "--no-inherit -r #{@env.architecture} " <<
     "--fstab /etc/fstab --kernel #{@env.ec2_kernel_id} -d /tmp")
  touch('.rebundle')
end

task(:update => '.update')
file_create('.update' => '.rebundle') do
  bname = "#{@env.image_name}-#{@env.ec2_instance_type}-#{@env.ec2_instance_cpu}"<<
    "-#{Time.now.to_f}"
  sh(". /etc/profile && ec2-upload-bundle -b #{bname} -a #{@env.access_key_id} " <<
     "-s #{@env.secret_access_key} --location #{@env.location} -m /tmp/image.manifest.xml && " <<
     "ec2-register -K /tmp/key.pem -C /tmp/cert.pem " <<
     "--region #{@env.region} -n #{bname} #{bname}/image.manifest.xml")
  touch('.update')
end

task(:release => '.release')
file_create('.release' => :cleanup) do
  File.open("/tmp/key.pem", 'w') do |f|
    f.write(@env.key.strip)
  end
  File.open("/tmp/cert.pem", 'w') do |f|
    f.write(@env.cert.strip)
  end
  sh(". /etc/profile && ec2-bundle-vol --batch -u #{@env.owner_id} " <<
     "-k /tmp/key.pem -c /tmp/cert.pem " <<
     "-a -e /root,/dev,/proc,/sys,/tmp,/mnt,/etc/pardalys,/usr/share/pardalys,/home/ubuntu/.fixssh,/home/ubuntu/.ssh/authorized_keys,/home/ubuntu/environment/tools/pardalys/pardalys/staging/config.yml " <<
     "--no-inherit -r #{@env.architecture} " <<
     "--fstab /etc/fstab --kernel #{@env.ec2_kernel_id} -d /tmp")
  bname = "#{@env.image_name}-#{@env.ec2_instance_type}-#{@env.ec2_instance_cpu}"<<
    "-#{Time.now.to_f}"
  sh(". /etc/profile && ec2-upload-bundle -b #{bname} -a #{@env.access_key_id} " <<
     "-s #{@env.secret_access_key} --location #{@env.location} -m /tmp/image.manifest.xml && " <<
     "ec2-register -K /tmp/key.pem -C /tmp/cert.pem " <<
     "--region #{@env.region} -n #{bname} #{bname}/image.manifest.xml")
  touch('.release')
end

######################################################################
# Instance
######################################################################

task(:group, [:domain] => :env) do |t, args|
  # create a domain security group
  begin
    @ec2.create_security_group(:group_name => args.domain,
                               :group_description => "#{@env.group} group")
  rescue AWS::EC2::InvalidGroupDuplicate ; end
  # authorize all access inside the group
  begin
    @ec2.authorize_security_group_ingress(:group_name => args.domain,
                                          :source_security_group_name =>
                                          args.domain,
                                          :source_security_group_owner_id =>
                                          @env.owner_id.to_s)
  rescue AWS::EC2::InvalidPermissionDuplicate ; end
end

desc("gimme access on ssh")
task(:ingress, [:domain] => :group) do |t, args|
  # create an ssh ingress for my ip
  cidr = Hpricot(open('http://checkip.dyndns.com').read).at('body').
    inner_text.gsub('Current IP Address: ', '') << '/32'
  begin
    @ec2.authorize_security_group_ingress(:group_name => args.domain,
                                          :ip_protocol => 'tcp',
                                          :cidr_ip => cidr,
                                          :from_port => '22',
                                          :to_port => '22')
  rescue AWS::EC2::InvalidPermissionDuplicate ; end
end

desc("run an instance")
task(:run, [:zone, :itype, :image, :domain, :master, :hostname] =>
     :ingress) do |t, args|
  unless instance_id(args.hostname)
    # create a keypair
    begin
      pem = "#{Dir.pwd}/ssh/#{args.hostname}.pem"
      key = @ec2.create_keypair(:key_name => args.hostname).keyMaterial
      File.open(pem, "w+") { |f| f.write(key) }
      File.chmod(0600, pem)
    rescue AWS::EC2::InvalidKeyPairDuplicate ; end
    # create a host group
    begin
      @ec2.create_security_group(:group_name => args.hostname,
                                 :group_description => args.hostname)
    rescue AWS::EC2::InvalidGroupDuplicate ; end
    # create a bucket for this host
    AWS::S3::Base.establish_connection!(:access_key_id =>
                                        @env.access_key_id,
                                        :secret_access_key =>
                                        @env.secret_access_key)
    begin
      AWS::S3::Bucket.create("#{args.hostname}.#{args.domain}")
    rescue AWS::S3::BucketAlreadyExists ; end
    # setup the boothook script
    @env.hostname = args.hostname
    @env.domain = args.domain
    @env.master = args.master
    user_data = ERB.new(IO.read('boot.erb')).result(@env.binding)
    # run the instance
    @ec2.run_instances(:instance_type => args.itype,
                       :image_id => args.image,
                       :key_name => args.hostname,
                       :availability_zone => args.zone,
                       :group_id => [args.domain, args.hostname],
                       :min_count => 1,
                       :max_count => 1,
                       :user_data => user_data)
    puts(":)")
  end
end

def instance_id(name)
  resSet = @ec2.describe_instances.reservationSet
  unless resSet.nil?
    resSet.item.each do |r|
      r.instancesSet.item.find do |i|
        i.keyName == name && i.instanceState.name != 'terminated'
      end
    end
  end
end
